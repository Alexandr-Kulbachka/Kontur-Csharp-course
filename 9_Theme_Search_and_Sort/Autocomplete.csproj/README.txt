Во многих программах в разных контекстах можно увидеть функцию автодополнения вводимого текста. Обычно это работает так: 
есть словарь всех допустимых значений, и когда пользователь вводит начало некоторого слова, ему показывают несколько 
подходящих слов из словаря, начинающихся с букв, уже введенных пользователем.

Такую функцию очень просто реализовать "в лоб", если словарь небольшой. Если же словарь большой, то необходимо 
задумываться об эффективности алгоритма.

Запустите проект autocomplete и поизучайте программу. В частности попробуйте набрать префиксы a, ab, zzz. На zzz поиск 
будет заканчиваться таймаутом.

В следующих трех заданиях нужно будет внедрить в эту программу бинарный поиск и ускорить её!

Начать нужно с простого. В файле LeftBorderTask.cs реализуйте бинарный поиск левой границы в упорядоченном множестве фраз.
 Подробности в комментариях в файле LeftBorderTask.cs!

-----------------------------------------------------------------------------------------------------------------------

Продолжайте в том же проекте

По аналогии с предыдущим заданием, в файле RightBorderTask.cs реализуйте бинарный поиск правой границы в упорядоченном 
множестве фраз. Подробности в комментариях в файле RightBorderTask.cs!

-----------------------------------------------------------------------------------------------------------------------

Продолжайте в том же проекте

В файле AutocompleteTask.cs реализуйте методы GetTopByPrefix и GetCountByPrefix. Проверить корректность можно запустив 
проект autocomplete. Теперь отображаться должен не один вариант, а 10. А в строке статуса отображаться общее количество 
подходящих фраз.

На эти два метода нужно написать модульные тесты с использованием библиотеки NUnit. Они должны быть в том же файле 
AutocoompleteTask.cs отдельным классом AutocompleteTests.